use crate::problem_parse::Problem;

mod code_builder;
use code_builder::*;

pub fn codegen(problem: &Problem) -> String {
    let variables = problem
        .input
        .iter()
        .map(|input| {
            format!(
                "{} {}({}); std::cin >> {};",
                get_type(input.rank, &input.format),
                input.parameter,
                get_initializer(&input.length, &input.format),
                input.parameter
            )
        })
        .collect::<Vec<_>>();
    let args = problem
        .input
        .iter()
        .map(|input| format!("{}", input.parameter))
        .collect::<Vec<_>>();

    let mut main_code = variables
        .iter()
        .map(|variable| Code::Line(variable.to_string()))
        .collect::<Vec<_>>();
    (&mut main_code).push(Code::Line(function_call("solution", &args)));

    let input_arguments = problem
        .input
        .iter()
        .map(|input| {
            format!(
                "{} {}",
                get_type(input.rank, &input.format),
                input.parameter
            )
        })
        .collect::<Vec<_>>();

    let generated = CodeBuilder {
        code: vec![
            Code::MultiLineComment("This code is generated by boj-cli."),
            Code::Line(include_str!("./default_include.cc").to_string()),
            Code::Line("".to_string()),
            Code::Function(Function {
                name: "solution",
                return_type: "void",
                args: input_arguments.clone(),
                code: CodeBuilder { code: vec![] },
            }),
            Code::Line("".to_string()),
            Code::Function(Function {
                name: "main",
                args: vec![],
                return_type: "int",
                code: CodeBuilder { code: main_code },
            }),
            Code::Line("".to_string()),
            Code::Function(Function {
                name: "solution",
                return_type: "void",
                args: input_arguments.clone(),
                code: CodeBuilder { 
                    code: vec![
                        Code::Line("".to_string()),
                    ] 
                },
            }),
        ],
    };

    generated.build(0)
}
